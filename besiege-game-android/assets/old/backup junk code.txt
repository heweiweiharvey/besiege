
	/** calculate and save the polygons into the waterBodies array
	 */
//	private void calcWaterPolygons() {
//		// copy vg.centers into new Array
//		Array<Center> centerArray = new Array<Center>();
//		for (Center c : vg.centers)
//			centerArray.add(c);
//		
//		Array<Center> currentPolygon = new Array<Center>();
//		while (centerArray.size > 0) {
//			Center c = centerArray.first();
//			if (c.water) {
//				centerArray.removeValue(c, true);
//				// start recursive algorithm
//				findPolygon(c, currentPolygon, centerArray);
//				// add polygons to the water array
//				if (currentPolygon.size >= 1) {
//					waterBodies.add(makePolygon(currentPolygon));
//				}
//				currentPolygon.clear();
//			}
//			else centerArray.removeValue(c, true);
//		}
//	}
	
//	/** Recursive algorithm to group together all adjacent polygons
//	 * @param center
//	 * @param currentPolygon
//	 * @param centerArray
//	 */
//	private void findPolygon(Center center,  Array<Center> currentPolygon, Array<Center> centerArray) {
//		currentPolygon.add(center);
//		centerArray.removeValue(center, true);
//		for (Center c : center.neighbors) {
//			if (c.water && centerArray.contains(c, true)) {
//				findPolygon(c, currentPolygon, centerArray);	
//			}
//		}
//	}
//	
//	/** Makes a Polygon from an array of adjacent centers
//	 *  make sure to add the corners in order!
//	 * @return
//	 */
//	private Polygon makePolygon(Array<Center> currentPolygon) {
//		System.out.println("centers in polygon: " + currentPolygon.size);
//		Array<Corner> polygonEdges = new Array<Corner>();
//		boolean done = false;
//		for (Center center : currentPolygon) {
//			if (done == false) {
//				for (Corner corner : center.corners) {
//					if (onWaterEdge(corner)) {
//						//start adding (recursive method)
//						constructFromCorner(corner, polygonEdges);
//						done = true;
//						break;
//					}		
//				}
//			}
//			else break;
//		}
//			
//		System.out.println("num vertices: " + polygonEdges.size);
//		float[] vertices = new float[polygonEdges.size*2];
//		for (int i = 0; i < polygonEdges.size; i++) {
//			vertices[i*2] = (float) polygonEdges.get(i).loc.x;
//			vertices[i*2+1] = (float) (HEIGHT-polygonEdges.get(i).loc.y);
//		}
//		return new Polygon(vertices);
//	}
//		
//	private void constructFromCorner(Corner corner, Array<Corner> polygonEdges) {
//		polygonEdges.add(corner);
//		for (Corner adjacent : corner.adjacent) {
//			if (onWaterEdge(adjacent)) {
//				if (!polygonEdges.contains(adjacent, true)) {
//					constructFromCorner(adjacent, polygonEdges);
//					System.out.println("reconstructing");
//				}
//			}
//		}
//	}
//
//	private boolean onWaterEdge(Corner corner) {
//		if (corner.border) return true;
//		int waterTouches = 0;
//		for (int i = 0; i < corner.touches.size(); i++) {
//			if (corner.touches.get(i) == null) System.out.println("problem!");
//			if (corner.touches.get(i).water)
//				waterTouches++;
//		}
//		System.out.println("impassable edges size :" + waterTouches);
//		if (waterTouches >= 3) {
//			System.out.println("center of water");
//			return false;
//		}
//		else return true;
//	}
//	
//	public boolean isInWater(Destination d) {
//		for (Polygon waterPolygon : waterBodies) {
//			if (waterPolygon.contains(d.getX(), d.getY()))
//				return true;
//		}
//		return false;
//	}